import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;

import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;





public class AmountBasis 
{

	public static class JanMapper extends
	Mapper<LongWritable, Text, Text, Text> {
		public void map(LongWritable key, Text value, Context context)
		throws IOException, InterruptedException {
	String record = value.toString();
	String[] parts = record.split(";");
	context.write(new Text(parts[5]), new Text("Jan\t" + parts[8]));
	}
	}
	
	public static class FebMapper extends
	Mapper<LongWritable, Text, Text, Text> {
public void map(LongWritable key, Text value, Context context)
		throws IOException, InterruptedException {
	String record = value.toString();
	String[] parts = record.split(";");
	context.write(new Text(parts[5]), new Text("Feb\t" + parts[8]));
}
}
	public static class NovMapper extends
	Mapper<LongWritable, Text, Text, Text> {
public void map(LongWritable key, Text value, Context context)
		throws IOException, InterruptedException {
	String record = value.toString();
	String[] parts = record.split(";");
	context.write(new Text(parts[5]), new Text("Nov\t" + parts[8]));
}
}
	public static class DecMapper extends
	Mapper<LongWritable, Text, Text, Text> {
public void map(LongWritable key, Text value, Context context)
		throws IOException, InterruptedException {
	String record = value.toString();
	String[] parts = record.split(";");
	context.write(new Text(parts[5]), new Text("Dec\t" + parts[8]));
}
}
	
	public static class ReduceJoinReducer extends
	Reducer<Text, Text, Text, Text> {
public void reduce(Text key, Iterable<Text> values, Context context)
		throws IOException, InterruptedException {
	//String name = "";
	//String p_id="";
	 String MyKey = key.toString();
	long Jan_total = 0;
	long Feb_total = 0;
	long Nov_total =0 ;
	long Dec_total = 0;

	
	
	for (Text t : values) 
	{
		String parts[] = t.toString().split("\t");
		if (parts[0].equals("Jan")) {
		
			Jan_total += Float.parseFloat(parts[1]);	
		}
		
		if (parts[0].equals("Feb")) {
		
			Feb_total += Float.parseFloat(parts[1]);	
		}
		if (parts[0].equals("Nov")) {
		
			Nov_total += Float.parseFloat(parts[1]);	
		}
		if (parts[0].equals("Dec")) {
		
			Dec_total += Float.parseFloat(parts[1]);	
		}
		
		

	}
	String str = String.format("%f", Jan_total);
	String str1 = String.format("%f", Feb_total);
	String str2 = String.format("%f", Nov_total);
	String str3 = String.format("%f",  Dec_total);
	
	context.write(new Text(MyKey), new Text(str+"\t"+str1+"\t"+str2+"\t"+str3));
}
}
	
public static void main(String[] args) throws Exception {
		
		Configuration conf = new Configuration();
		Job job = new Job(conf);
	    job.setJarByClass(AmountBasis .class);
	    job.setJobName("Reduce Side Join");
		job.setReducerClass(ReduceJoinReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		
		MultipleInputs.addInputPath(job, new Path(args[0]),TextInputFormat.class, JanMapper.class);
		MultipleInputs.addInputPath(job, new Path(args[1]),TextInputFormat.class, FebMapper.class);
		MultipleInputs.addInputPath(job, new Path(args[2]),TextInputFormat.class, NovMapper.class);
		MultipleInputs.addInputPath(job, new Path(args[3]),TextInputFormat.class, DecMapper.class);
		
		
		Path outputPath = new Path(args[4]);
		FileOutputFormat.setOutputPath(job, outputPath);
		//outputPath.getFileSystem(conf).delete(outputPath);
		
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}	
	
	
	
}
